apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

/**
 * Current adapter version
 *
 * The three first digits correspond to the version of the PublisherSDK that is linked to this adapter.
 * The last digit is an incremental version of this adapter for this PublisherSDK version.
 *
 * This means, that every time a new PublisherSDK is deployed (version A.B.C), then a new adapter should be
 * deployed as well with version A.B.C.0. If fixes, or updates are required on the adapter without updating
 * the SDK, then the last digit is incremented to produce A.B.C.1, then A.B.C.2, ...
 */
version = "3.4.0.1"

def sdk_version = version.substring(0, version.lastIndexOf('.'))

android {
    buildToolsVersion '27.0.3'
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "$version"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SDK_VERSION", "\"$sdk_version\"")
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SDK_VERSION", "\"$sdk_version\"")
        }
    }

}

configurations.all {
    resolutionStrategy {
        force "com.android.support:support-core-utils:27.0.1"
    }
}

dependencies {
    def useLocalPublisherSdk = false
    if (useLocalPublisherSdk) {
        implementation(project(path: ":publisher-sdk-release"))
    } else {
        // TODO EE-916 Publish SNAPSHOT release of the SDK and use them as a dependency instead of
        //  relying on dynamic version.
        implementation("com.criteo.publisher:criteo-publisher-sdk:$sdk_version-+")
    }

    compileOnly("com.mopub:mopub-sdk-banner:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    compileOnly("com.mopub:mopub-sdk-interstitial:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    testImplementation("junit:junit:4.12")
    testImplementation("org.mockito:mockito-core:3.2.4")

    testImplementation("com.mopub:mopub-sdk-banner:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    testImplementation("com.mopub:mopub-sdk-interstitial:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    androidTestImplementation("com.android.support.test:runner:1.0.2")
    androidTestImplementation("com.android.support.test.espresso:espresso-core:3.0.2")
    androidTestImplementation("org.mockito:mockito-android:2.7.22")

    androidTestImplementation("com.mopub:mopub-sdk-banner:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    androidTestImplementation("com.mopub:mopub-sdk-interstitial:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }
}
