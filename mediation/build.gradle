apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    buildToolsVersion '27.0.3'
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "$adapter_version"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SDK_VERSION", "\"$sdk_version\"")
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SDK_VERSION", "\"$sdk_version\"")
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

def support_version = "27.0.1"

dependencies {
    def useLocalPublisherSdk = false
    if (useLocalPublisherSdk) {
        implementation(project(path: ":publisher-sdk-release"))
    } else {
        // TODO EE-916 Publish SNAPSHOT release of the SDK and use them as a dependency instead of
        //  relying on dynamic version.
        releaseImplementation("com.criteo.publisher:criteo-publisher-sdk:$sdk_version+")
        debugImplementation("com.criteo.publisher:criteo-publisher-sdk-debug:$sdk_version+")
    }

    compileOnly("com.android.support:support-annotations:$support_version")

    compileOnly("com.mopub:mopub-sdk-banner:5.6.0@aar") {
        transitive = true
    }

    compileOnly("com.mopub:mopub-sdk-interstitial:5.6.0@aar") {
        transitive = true
    }

    testImplementation("junit:junit:4.12")
    testImplementation("org.mockito:mockito-core:3.2.4")
    testImplementation("com.android.support:support-core-utils:$support_version")
    testImplementation("com.criteo.publisher:criteo-publisher-sdk-test-utils:$sdk_version+")

    testImplementation("com.mopub:mopub-sdk-banner:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    testImplementation("com.mopub:mopub-sdk-interstitial:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    androidTestImplementation("com.android.support.test:runner:1.0.2")
    androidTestImplementation("com.android.support.test.espresso:espresso-core:3.0.2")
    androidTestImplementation("org.mockito:mockito-android:2.7.22")
    androidTestImplementation("com.android.support:support-core-utils:$support_version")
    androidTestImplementation("com.criteo.publisher:criteo-publisher-sdk-test-utils:$sdk_version+")

    /** Needed to retrieve the device ID */
    androidTestImplementation("com.google.android.gms:play-services-ads:15.0.0")

    androidTestImplementation("com.mopub:mopub-sdk-banner:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }

    androidTestImplementation("com.mopub:mopub-sdk-interstitial:5.6.0@aar") {
        exclude(group: "com.android.support")
        transitive = true
    }
}

task packageAarRelease(type: Zip, dependsOn: 'bundleRelease') {
    from file("$buildDir/outputs/aar/mediation-release.aar")
    extension "aar"
}

def azureLocalRepository = "${buildDir}/azure-${version}"

publishing {
    publications {
        release(MavenPublication) {
            groupId = "com.criteo.mediation.mopub"
            artifactId = "criteo-adapter"
            artifact packageAarRelease
            version adapter_publication_version

            pom {
                packaging = "aar"

                withXml {
                    def dependenciesNode = asNode().appendNode("dependencies")

                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", "com.criteo.publisher")
                    dependencyNode.appendNode("artifactId", "criteo-publisher-sdk")
                    dependencyNode.appendNode("version", "$sdk_version")
                    dependencyNode.appendNode("type", "aar")
                }
            }
        }
    }

    with nexusPreProdRepository
    with nexusProdRepository
    with devRepository

    repositories {
        maven {
            // TODO EE-915 Find a way to make the upload from Gradle rather than relying on bash script
            name = "azure"
            url = "file://${azureLocalRepository}"
        }
    }
}

task uploadToAzure {
    doLast {
        exec {
            commandLine "bash", "../scripts/publish-to-azure.sh", "${azureLocalRepository}"
        }
    }
}

tasks.withType(PublishToMavenRepository).all {
    if (name.contains("Azure")) {
        it.finalizedBy uploadToAzure
    }
}
